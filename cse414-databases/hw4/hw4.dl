/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)

.output p1(filename="hw4-1.ans")
//.output p1(IO=stdout)
p1(x,d) :- parent_child("Priscilla", x), person(x,d).
p1(x,d) :- p1(y,_), parent_child(y,x), person(x,d).
// 123

/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)
.decl T(x:PersonType, d:DescriptionType, m:number)
.decl Q(x:PersonType, d:DescriptionType, m:number)

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)
T(x,d,m) :- parent_child(x,_), person(x,d), male(x), m = count : { parent_child(x,_) }.
Q(x,d,m) :- parent_child(x,_), person(x,d), female(x), m = count : { parent_child(x,_) }.
p2(x,d,m) :- T(x,d,e), m = max c : { T(_,_,c) }, e=m.
p2(x,d,m) :- Q(x,d,e), m = max c : { Q(_,_,c) }, e=m.
// 2

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)
.decl p3a(x:PersonType)
.decl gen(p:PersonType, g:number)

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)

p3a(x) :- person(x,_), parent_child(_,x).

gen(x,0) :- parent_child(x,_), !parent_child(_,x).
gen(c,g) :- gen(a, n), parent_child(a, c), g = n + 1.
p3(x,m1,m2) :- person_living(x), m1 = min g : { gen(x,g) }, m2 = max h : { gen(x,h) }.
 
/************* problem 4 **************/
.decl p4(x:PersonType)
.decl p4a(x:PersonType, y:PersonType)

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)

p4a(x,y) :- person_living(x), parent_child(y,x), female(y).
p4a(x,y) :- p4a(x,b), parent_child(y,b), female(y).
// p4a: KV pair of living person, ancestor
p4(x) :- p4a(_,x), count : { person_living(_) } = count : { p4a(_,x) }.


/************* problem 5 **************/
.decl p5(x:PersonType)
.decl p5a(x:PersonType, g:number)
.decl pgen(x:PersonType, g:number)

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)

pgen(x,0) :- person_living(x).
pgen(p,g) :- pgen(c,n), parent_child(p,c), g = n + 1.
p5a(a,g) :- pgen(a,g), p4(a).
p5(a) :- p5a(a,g), g = min n : { p5a(_,n) }.


